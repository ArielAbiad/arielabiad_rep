
STUDENTE@201pc05 MINGW64 ~
$ git
usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.

STUDENTE@201pc05 MINGW64 ~
$ git --version
git version 2.38.1.windows.1

STUDENTE@201pc05 MINGW64 ~
$ mdkir myproject
bash: mdkir: command not found

STUDENTE@201pc05 MINGW64 ~
$ mkdir
mkdir: missing operand
Try 'mkdir --help' for more information.

STUDENTE@201pc05 MINGW64 ~
$ mkdir myproject

STUDENTE@201pc05 MINGW64 ~
$ cd myproject

STUDENTE@201pc05 MINGW64 ~/myproject
$ git init
Initialized empty Git repository in C:/Users/STUDENTE/myproject/.git/

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ ls

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ ls

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ ls

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ ls

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ ls

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ ls

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git status
On branch master

No commits yet

nothing to commit (create/copy files and use "git add" to track)

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ ls

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ ls

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ /^C

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ ls

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ pwd
/c/Users/STUDENTE/myproject

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ ls ..
'3D Objects'/
 AlgoBuild/
 AppData/
'Cisco Packet Tracer 6.2sv'/
'Cisco Packet Tracer 7.3.1'/
'Cisco Packet Tracer 8.0.1'/
 Contacts/
 Cookies@
'Creative Cloud Files'/
'Creative Cloud Files (archived) (1)'/
'Creative Cloud Files adobe35@itisgalileiroma.it 65c26e0fc0f21266a9b2460b5b4bbe0d0595cc20d8d80dbf97a14b47ac5563bd'/
'Creative Cloud Files lania.michele.stud@itisgalileiroma.it 2c7dfb762dcd50a312529f3dc0a87efd7e52f332ea8a8ce10dd8d2a7dfcaa747'/
'Dati applicazioni'@
 Desktop/
 Documenti@
 Documents/
 Downloads/
 Favorites/
 Git-2.38.1-64-bit.exe*
'Impostazioni locali'@
 Links/
'Menu Avvio'@
 Modelli@
 Music/
 NTUSER.DAT
 NTUSER.DAT{7ad8306f-827f-11ec-a50e-98eecba971b3}.TM.blf
 NTUSER.DAT{7ad8306f-827f-11ec-a50e-98eecba971b3}.TMContainer00000000000000000001.regtrans-ms
 NTUSER.DAT{7ad8306f-827f-11ec-a50e-98eecba971b3}.TMContainer00000000000000000002.regtrans-ms
 OneDrive/
 Pictures/
 Prova.txt
 Recenti@
'Risorse di rete'@
'Risorse di stampa'@
'Saved Games'/
 Searches/
 SendTo@
 Videos/
 index.htm
 matrice.cpp
 myproject/
 ntuser.dat.LOG1
 ntuser.dat.LOG2
 ntuser.ini
 source/

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ ls ../*.html
ls: cannot access '../*.html': No such file or directory

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ vim

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ ls
index.html

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ pwd
/c/Users/STUDENTE/myproject

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ ls
index.html

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        index.html

nothing added to commit but untracked files present (use "git add" to track)

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git add index.html
warning: in the working copy of 'index.html', LF will be replaced by CRLF the next time Git touches it

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   index.html


STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git add--all
git: 'add--all' is not a git command. See 'git --help'.

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git add --all

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   index.html


STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   index.html


STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git add --all

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   index.html


STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git add --all

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   index.html


STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ ls
index.html

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git add --all

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   index.html


STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git add --all

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git add --all

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   index.html


STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git rm --cached
fatal: No pathspec was given. Which files should I remove?

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git add --all

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ ls
index.html

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ pwd
/c/Users/STUDENTE/myproject

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ ls
index.html

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git add --all

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   index.html


STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   index.html


STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ ls
index.html

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ pwd
/c/Users/STUDENTE/myproject

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ ls
README.md  bluestyle.css  index.html  index.html.htm

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   index.html

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        README.md
        bluestyle.css
        index.html.htm


STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git config --global user.name "Ariel Abiad"

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git config --global user.email "abiad.ariel_ryam_tanola.stud@itisgalileiroma.it
> "

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git commit -m
error: switch `m' requires a value

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git commit -m "First release of Hello World!"
[master (root-commit) caf66e8] First release of Hello World!
 1 file changed, 12 insertions(+)
 create mode 100644 index.html

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ ls
README.md  bluestyle.css  index.html  index.html.htm

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git log
commit caf66e8da42523fd473469b28b5b9a189bc0f927 (HEAD -> master)
Author: Ariel Abiad <abiad.ariel_ryam_tanola.stud@itisgalileiroma.it>
Date:   Fri Nov 11 09:33:37 2022 +0100

    First release of Hello World!

STUDENTE@201pc05 MINGW64 ~/myproject (master)
$ git commit -help
usage: git commit [<options>] [--] <pathspec>...

    -q, --quiet           suppress summary after successful commit
    -v, --verbose         show diff in commit message template

Commit message options
    -F, --file <file>     read message from file
    --author <author>     override author for commit
    --date <date>         override date for commit
    -m, --message <message>
                          commit message
    -c, --reedit-message <commit>
                          reuse and edit message from specified commit
    -C, --reuse-message <commit>
                          reuse message from specified commit
    --fixup [(amend|reword):]commit
                          use autosquash formatted message to fixup or amend/reword specified commit
    --squash <commit>     use autosquash formatted message to squash specified commit
    --reset-author        the commit is authored by me now (used with -C/-c/--amend)
    --trailer <trailer>   add custom trailer(s)
    -s, --signoff         add a Signed-off-by trailer
    -t, --template <file>
                          use specified template file
    -e, --edit            force edit of commit
    --cleanup <mode>      how to strip spaces and #comments from message
    --status              include status in commit message template
    -S, --gpg-sign[=<key-id>]
                          GPG sign commit

Commit contents options
    -a, --all             commit all changed files
    -i, --include         add specified files to index for commit
    --interactive         interactively add files
    -p, --patch           interactively add changes
    -o, --only            commit only specified files
    -n, --no-verify       bypass pre-commit and commit-msg hooks
    --dry-run             show what would be committed
    --short               show status concisely
    --branch              show branch information
    --ahead-behind        compute full ahead/behind values
    --porcelain           machine-readable output
    --long                show status in long format (default)
    -z, --null            terminate entries with NUL
    --amend               amend previous commit
    --no-post-rewrite     bypass post-rewrite hook
    -u, --untracked-files[=<mode>]
                          show untracked files, optional modes: all, normal, no. (Default: all)
    --pathspec-from-file <file>
                          read pathspec from file
    --pathspec-file-nul   with --pathspec-from-file, pathspec elements are separated with NUL character
